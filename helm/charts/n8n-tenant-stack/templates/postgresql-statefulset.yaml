{{- if .Values.postgresql.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "n8n-tenant-stack.postgresql.fullname" . }}
  labels:
    {{- include "n8n-tenant-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
spec:
  serviceName: {{ include "n8n-tenant-stack.postgresql.fullname" . }}
  replicas: 1 # Typically 1 for simple setup, HA needs more config
  selector:
    matchLabels:
      {{- include "n8n-tenant-stack.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: postgresql
  template:
    metadata:
      labels:
        {{- include "n8n-tenant-stack.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: postgresql
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # serviceAccountName: {{ include "n8n-tenant-stack.fullname" . }}-postgresql (if needed)
      containers:
        - name: postgresql
          image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
          imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
          ports:
            - name: tcp-postgresql
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_USER
              value: {{ .Values.postgresql.auth.username }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "n8n-tenant-stack.postgresql.secretName" . }}
                  key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey }}
            - name: POSTGRES_DB # Or POSTGRES_INITDB_ARGS for more complex init
              value: {{ .Values.postgresql.auth.database }}
            # Add other PostgreSQL specific env vars if needed
            # e.g. PGDATA
          livenessProbe:
            tcpSocket:
              port: tcp-postgresql
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          resources:
            {{- toYaml .Values.postgresql.resources | nindent 12 }}
          {{- if .Values.postgresql.persistence.enabled }}
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
          {{- end }}
  {{- if .Values.postgresql.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: postgresql-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.postgresql.persistence.size }}
        {{- if .Values.postgresql.persistence.storageClass }}
        storageClassName: {{ .Values.postgresql.persistence.storageClass }}
        {{- end }}
  {{- end }}
{{- end }}
